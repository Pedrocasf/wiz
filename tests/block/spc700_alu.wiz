// SYSTEM  spc700
//
// Disassembly created using Mesen-S's Trace Logger

bank zeropage @ 0x000 : [vardata;   0x100];
bank abs      @ 0x100 : [vardata;   0x100];
bank code     @ 0x200 : [constdata; 0x100];

in zeropage {
    var _padding1       : [u8; 0x11];

    var zp_u8_11        : u8;           // address = 0x11
    var zp_array_12     : [u8; 0x11];   // address = 0x12
    var zp_ptr_23       : *u8;          // ...
    var zp_array_ptr_25 : [*u8; 6];
}

in abs {
    var _padding2       : [u8; 0x40];

    var abs_u8_140      : u8;
    var abs_array_141   : [u8; 0x10];
}


// BLOCK 0000
in code {

func load() {

// BLOCK        60         clc
// BLOCK        88 01      adc #$01
// BLOCK        60         clc
// BLOCK        86         adc (x)
// BLOCK        60         clc
// BLOCK        84 11      adc $11
// BLOCK        60         clc
// BLOCK        94 12      adc $12,x
// BLOCK        60         clc
// BLOCK        85 40 01   adc $0140
// BLOCK        60         clc
// BLOCK        95 41 01   adc $0141,x
// BLOCK        60         clc
// BLOCK        96 41 01   adc $0141,y
// BLOCK        60         clc
// BLOCK        87 25      adc [$25,x]
// BLOCK        60         clc
// BLOCK        97 23      adc [$23],y
    a = a + 1;
    a = a + *(x as *u8);
    a = a + zp_u8_11;
    a = a + zp_array_12[x];
    a = a + abs_u8_140;
    a = a + abs_array_141[x];
    a = a + abs_array_141[y];
    a = a + *zp_array_ptr_25[unaligned x];
    a = a + zp_ptr_23[y];

// BLOCK        88 02      adc #$02
// BLOCK        86         adc (x)
// BLOCK        84 11      adc $11
// BLOCK        94 12      adc $12,x
// BLOCK        85 40 01   adc $0140
// BLOCK        95 41 01   adc $0141,x
// BLOCK        96 41 01   adc $0141,y
// BLOCK        87 25      adc [$25,x]
// BLOCK        97 23      adc [$23],y
    a = a +# 2;
    a = a +# *(x as *u8);
    a = a +# zp_u8_11;
    a = a +# zp_array_12[x];
    a = a +# abs_u8_140;
    a = a +# abs_array_141[x];
    a = a +# abs_array_141[y];
    a = a +# *zp_array_ptr_25[unaligned x];
    a = a +# zp_ptr_23[y];

// BLOCK        80         sec
// BLOCK        A8 03      sbc #$03
// BLOCK        80         sec
// BLOCK        A6         sbc (x)
// BLOCK        80         sec
// BLOCK        A4 11      sbc $11
// BLOCK        80         sec
// BLOCK        B4 12      sbc $12,x
// BLOCK        80         sec
// BLOCK        A5 40 01   sbc $0140
// BLOCK        80         sec
// BLOCK        B5 41 01   sbc $0141,x
// BLOCK        80         sec
// BLOCK        B6 41 01   sbc $0141,y
// BLOCK        80         sec
// BLOCK        A7 25      sbc [$25,x]
// BLOCK        80         sec
// BLOCK        B7 23      sbc [$23],y
    a = a - 3;
    a = a - *(x as *u8);
    a = a - zp_u8_11;
    a = a - zp_array_12[x];
    a = a - abs_u8_140;
    a = a - abs_array_141[x];
    a = a - abs_array_141[y];
    a = a - *zp_array_ptr_25[unaligned x];
    a = a - zp_ptr_23[y];

// BLOCK        A8 04      sbc #$04
// BLOCK        A6         sbc (x)
// BLOCK        A4 11      sbc $11
// BLOCK        B4 12      sbc $12,x
// BLOCK        A5 40 01   sbc $0140
// BLOCK        B5 41 01   sbc $0141,x
// BLOCK        B6 41 01   sbc $0141,y
// BLOCK        A7 25      sbc [$25,x]
// BLOCK        B7 23      sbc [$23],y
    a = a -# 4;
    a = a -# *(x as *u8);
    a = a -# zp_u8_11;
    a = a -# zp_array_12[x];
    a = a -# abs_u8_140;
    a = a -# abs_array_141[x];
    a = a -# abs_array_141[y];
    a = a -# *zp_array_ptr_25[unaligned x];
    a = a -# zp_ptr_23[y];

// BLOCK        68 05      cmp #$05
// BLOCK        66         cmp (x)
// BLOCK        64 11      cmp $11
// BLOCK        74 12      cmp $12,x
// BLOCK        65 40 01   cmp $0140
// BLOCK        75 41 01   cmp $0141,x
// BLOCK        76 41 01   cmp $0141,y
// BLOCK        67 25      cmp [$25,x]
// BLOCK        77 23      cmp [$23],y
    cmp(a, 5);
    cmp(a, *(x as *u8));
    cmp(a, zp_u8_11);
    cmp(a, zp_array_12[x]);
    cmp(a, abs_u8_140);
    cmp(a, abs_array_141[x]);
    cmp(a, abs_array_141[y]);
    cmp(a, *zp_array_ptr_25[unaligned x]);
    cmp(a, zp_ptr_23[y]);

// BLOCK        C8 06      cpx #$06
// BLOCK        3E 11      cpx $11
// BLOCK        1E 40 01   cpx $0140
    cmp(x, 6);
    cmp(x, zp_u8_11);
    cmp(x, abs_u8_140);

// BLOCK        AD 07      cmy #$07
// BLOCK        7E 11      cpy $11
// BLOCK        5E 40 01   cpy $0140
    cmp(y, 7);
    cmp(y, zp_u8_11);
    cmp(y, abs_u8_140);

// BLOCK        28 08      and #$08
// BLOCK        26         and (x)
// BLOCK        24 11      and $11
// BLOCK        34 12      and $12,x
// BLOCK        25 40 01   and $0140
// BLOCK        35 41 01   and $0141,x
// BLOCK        36 41 01   and $0141,y
// BLOCK        27 25      and [$25,x]
// BLOCK        37 23      and [$23],y
    a = a & 8;
    a = a & *(x as *u8);
    a = a & zp_u8_11;
    a = a & zp_array_12[x];
    a = a & abs_u8_140;
    a = a & abs_array_141[x];
    a = a & abs_array_141[y];
    a = a & *zp_array_ptr_25[unaligned x];
    a = a & zp_ptr_23[y];

// BLOCK        08 09      ora #$09
// BLOCK        06         ora (x)
// BLOCK        04 11      ora $11
// BLOCK        14 12      ora $12,x
// BLOCK        05 40 01   ora $0140
// BLOCK        15 41 01   ora $0141,x
// BLOCK        16 41 01   ora $0141,y
// BLOCK        07 25      ora [$25,x]
// BLOCK        17 23      ora [$23],y
    a = a | 9;
    a = a | *(x as *u8);
    a = a | zp_u8_11;
    a = a | zp_array_12[x];
    a = a | abs_u8_140;
    a = a | abs_array_141[x];
    a = a | abs_array_141[y];
    a = a | *zp_array_ptr_25[unaligned x];
    a = a | zp_ptr_23[y];

// BLOCK        48 0A      eor #$0a
// BLOCK        46         eor (x)
// BLOCK        44 11      eor $11
// BLOCK        54 12      eor $12,x
// BLOCK        45 40 01   eor $0140
// BLOCK        55 41 01   eor $0141,x
// BLOCK        56 41 01   eor $0141,y
// BLOCK        47 25      eor [$25,x]
// BLOCK        57 23      eor [$23],y
    a = a ^ 10;
    a = a ^ *(x as *u8);
    a = a ^ zp_u8_11;
    a = a ^ zp_array_12[x];
    a = a ^ abs_u8_140;
    a = a ^ abs_array_141[x];
    a = a ^ abs_array_141[y];
    a = a ^ *zp_array_ptr_25[unaligned x];
    a = a ^ zp_ptr_23[y];

// BLOCK        6F         rts
}

}

